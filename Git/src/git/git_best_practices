# COMMIT BEST PRACTICES

1. Atomic commit
   Commit only one change. It may be across multiple files, but it's one
   single change.
   - Work on one single thing at a time
   - Keep changes small

2. Commit early, commit often
   - Commit after a single change.
   - Push when everything is working.
   
3. Do not commit generated files

4. Do not commit dependencies

5. Do not commit local configuration files

6. Do not commit broken code

7. Test your changes before committing

8. Write useful commit messages
   - Straightforward
   - Meaningful

9. Review your commit (code review)

10. Use reference numbers with your commit

11. Refer a commit by hash
	- 40 digit long hex number
	- generated every time a commit is added
	
12. VCS does not substitute for a good backup.


# NAMING BEST PRACTICES

1. Use group words in the branch name
   - This reveals the branches purpose
   - wip -> Work in progress
   - exp -> Experimental branch for dev purposes
   - feature -> adding a new feature
   - bug -> Issue/bug with code that branch is supposed to fix

2. Use separators
   - Depends on needs of the team
   - bug_login_page_redirect
   - feature-sso-implemented

3. Don't use only numbers

4. Avoid long names

5. Avoid all naming conventions at once
   - Decide on the best practices of the team and apply those.
   
 # BRANCHES BEST PRACTICES
 
 1. Use branches

2. Use branch naming conventions

3. Delete stale branches

4. Keep branches up to date

5. Do not rewrite history of branches

6. Protect the main branch
   - Only merge requests are allowed after a code review

7. Test before pushing


# PULL BEST PRACTICES

1. Use pull requests

2. One pull request for one concern
   - There can be several commits, but they should be for one feature.
   
3. Do not ignore pull requests for long.

4. Complete your work before a pull request.

5. Use useful comments with a pull request.

6. Do not mix refactoring with a new feature.


# WORKFLOW BEST PRACTICES

1. Use a workflow
   - Guidelines for a reliable and efficient way of using Git to conduct work.
   
2. Enforce Standards

3. Integrate with external tools
	- Jira, open-source bug tracker.